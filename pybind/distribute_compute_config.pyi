from typing import List, Optional

class File(): ...

class Job(): ...

class Initialize(): ...

class Description(): ...

class Meta(): ...

class ApptainerConfig(): ...

class Slurm(): ...

def metadata(namespace: str, batch_name: str, capabilities: List[str], matrix_username: Optional[str] = None) -> Meta: ...

def initialize(sif_path: str, requried_files: List[File], required_mounts: List[str]) -> Initialize: ...

def job(name: str, requried_files: List[File], slurm: Optional[Slurm] = None) -> Job: ...

def description(initialize: Initialize, jobs: List[Job]) -> Description: ...

def file(path: str, relative=False, alias=None) -> File: ...

def apptainer_config(meta: Meta, description: Description, slurm: Optional[Slurm] = None) -> ApptainerConfig: ...

def write_config_to_file(config: ApptainerConfig, path: str): ...

def slurm(job_name: Optional[str] = None, output: Optional[str] = None, nodes: Optional[int] = None, ntasks: Optional[int] = None, cpus_per_task: Optional[int] = None, mem_per_cpu: Optional[str] = None, hint: Optional[str] = None, time: Optional[str] = None, partition: Optional[str] = None, account: Optional[str] = None, mail_user: Optional[str] = None, mail_type: Optional[str] = None) -> Slurm
